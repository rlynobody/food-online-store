import React from "react";
import qs from "qs";
import { useNavigate } from "react-router-dom";
import ReactPaginate from "react-paginate";
import Categories from "../Components/Categories";
import Sort, { list } from "../Components/Sort";
import axios from "axios";
import PizzaBlock from "../Components/PizzaBlock/PizzaBlock";
import Skeleton from "../Components/PizzaBlock/Skeleton";
import Pagination from "../Components/Pagination";
import { SearchContext } from "../App";
import { useSelector, useDispatch } from "react-redux";
import {
  setCategoryId,
  setCurrentPage,
  setFilters,
  selectFilter,
} from "../Redux/slices/filterSlice";
import {
  setItems,
  fetchPizzas,
  selectPizzaItems,
} from "../Redux/slices/pizzaSlice";

const Home = () => {
  const { categoryId, currentPage, searchValue } = useSelector(selectFilter);
  const { items, status } = useSelector(selectPizzaItems); // status —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const sortType = useSelector((state) => state.filter.sort.sortProperty);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);
  // const [categoryId, setCategoryId] = React.useState(0);
  const onChangePage = (number) => {
    dispatch(setCurrentPage(number));
  };

  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
  React.useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sortType,
        categoryId,
        currentPage,
      });
      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [categoryId, sortType, currentPage]);

  const getPizzas = async () => {
    const order = sortType.includes("-") ? "asc" : "desc";
    const sortBy = sortType.replace("-", "");
    const category = categoryId > 0 ? `category=${categoryId}` : "";
    const search = searchValue ? `&search=${searchValue}` : ""; // –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫—ç–Ω–¥ –ø–æ–∏—Å–∫

    dispatch(fetchPizzas({ order, sortBy, category, search, currentPage }));

    window.scrollTo(0, 0);
  };

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));

      const sort = list.find((obj) => obj.sortProperty === params.sortProperty);

      dispatch(setFilters({ ...params, sort }));
      isSearch.current = true;
    }
  }, []);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  React.useEffect(() => {
    getPizzas();
  }, [categoryId, sortType, currentPage, searchValue]); // [] –û–±–æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è useEffect, —á—Ç–æ –∫–æ–¥ —Å–ª–µ–¥—É–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞

  return (
    <>
      <div className="content__top">
        <Categories
          value={categoryId}
          onChangeCategory={(index) => dispatch(setCategoryId(index))}
        />
        <Sort value={sortType} />
      </div>
      {status == "error" ? (
        <div />
      ) : (
        <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      )}
      {status == "error" ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>
            –í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏
            –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: hsnlvsea@pizza.com
          </p>
        </div>
      ) : (
        <div className="content__items">
          {status == "loading" // –£—Å–ª–æ–≤–∏–µ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—è—Ç—Å—è, –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç-—Å–∫–∏–ª–µ—Ç
            ? [...new Array(8)].map((_, index) => <Skeleton key={index} />) //_, –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è map, –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            : items
                // –°–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç
                // –ø–æ–¥—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ –∏ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
                // .filter((obj) => {
                //   if (
                //     obj.title.toLowerCase().includes(searchValue.toLowerCase())
                //   ) {
                //     return true;
                //   }
                //   return false;
                // })
                .map((obj) => <PizzaBlock key={obj.id} {...obj} />)}
        </div>
      )}
      <Pagination
        currentPage={currentPage}
        onChangePage={(number) => onChangePage(number)}
      />
    </>
  );
};

export default Home;
